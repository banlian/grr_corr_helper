#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 4.18
#  in conjunction with Tcl version 8.6
#    Nov 05, 2018 12:29:04 AM CST  platform: Windows NT

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

from copyData import *
import subprocess

from tkinter import messagebox

from corrhelper import *
from grrhelper import *
from dataHelper import *


def set_Tk_var():
    global product
    product = tk.IntVar()
    product.set(1)

    global check_grr
    check_grr = tk.IntVar()
    check_grr.set(1)
 
    global check_cmm
    check_cmm = tk.IntVar()
    check_cmm.set(0)
 
    global corr_cmm_count
    corr_cmm_count = tk.IntVar()
    corr_cmm_count.set(30)
    global corr_data_count
    corr_data_count = tk.IntVar()
    corr_data_count.set(30)



def copy_data(p1):
    print('dataProcessHelper_support.copy_data')
    print('p1 = {0}'.format(p1))

    try:
        ch = CopyDataHelper()
        ch.run_copy()
    except FileExistsError as e:
        messagebox.showinfo('复制文件', '复制文件异常' + str(e))
        return
    w.CopyDataFolderText.delete(0.0, tk.END)
    w.CopyDataFolderText.insert(tk.END, ch.src_data_folder)
    messagebox.showinfo('复制文件', '复制文件完成！')


def open_cmm_folder(p1):
    print('dataProcessHelper_support.open_cmm_folder')
    print('p1 = {0}'.format(p1))
    subprocess.call('explorer ".\\CMM"', shell=True)


def run_corr(p1):
    print('dataProcessHelper_support.run_corr')

    # product
    pid = product.get()
    product_name = ''
    if pid == 1:
        print('run_corr a117vc')
        product_name = 'a117vc'
        pass
    else:
        print(product_name + " error")
        messagebox.showwarning("CORR产品名称异常", product_name)
        return

    #corr count
    data_count = corr_data_count.get()
    c_count = corr_cmm_count.get()

    #corr_type
    run_cmm = check_cmm.get()

    raw_cmm_count = c_count
    raw_data_count = data_count

    today_data_file = get_today_data_file()

    print('run corr:')
    print([pid,product_name, data_count, c_count, run_cmm,, today_data_file])

    raw_cmm_file = os.path.join(cmm_data_folder, corr_data_dict[product_name])
    raw_data_file = os.path.join(data_folder, today_data_file)

    if not os.path.exists(raw_cmm_file):
        msg = 'raw_data_file ' + raw_cmm_file + ' not exists'
        print(msg)
        messagebox.showinfo("相关性文件异常", msg)
        return
    if (not os.path.exists(raw_data_file)) and (run_cmm == 1):
        msg = 'raw_data_file ' + raw_data_file + ' not exists'
        print(msg)
        messagebox.showinfo("相关性文件异常", msg)
        return
   

    w.TextCORR.insert(tk.END, 'run corr start...\r\n')
    time.sleep(0.3)

    # clear display
    w.TextCORR.delete(0.0, tk.END)
    if run_cmm == 1:
        # cmm corr
        corr = CorrUtil(product_name)
        corr_display = corr.run_corr_cmm2station('c', raw_cmm_file, raw_cmm_count, raw_data_file, raw_data_count)
        # display
        w.TextCORR.insert(tk.END, '\r\nrun corr:\r\n')
        w.TextCORR.insert(tk.END, '\r\n'.join(corr_display))



def run_corr_template(p1):
    print('dataProcessHelper_support.run_corr_template')
    print('p1 = {0}'.format(p1))
    subprocess.call('explorer ".\\"', shell=True)


def run_grr(p1):
    print('dataProcessHelper_support.run_grr')
    print('p1 = {0}'.format(p1))

    pid = product.get()
    product_name = ''
    if pid == 1:
        print('run_grr p1')
        product_name = 'p1'
        pass
    else:
        print(product_name + " error")
        messagebox.showwarning("GRR产品名称异常", product_name)
        return

    today_data_file = get_today_data_file()
    run_grr = check_grr.get()

    print('run grr:')
    print([pid, product_name, run_grr, today_data_file])
    w.TextGRR.insert(tk.END, 'run grr start...\r\n')
    time.sleep(0.3)

    # clear display
    w.TextGRR.delete(0.0, tk.END)

    if run_grr == 1:
        # run station grr
        station = 'grr'
        raw_data_file = os.path.join(data_folder, today_data_file)
        if not os.path.exists(raw_data_file):
            msg = raw_data_file + ' not exists'
            print(msg)
            messagebox.showwarning("GRR文件异常", msg)
            return
        grr = GrrUtil(product_name, station)
        grr_display = grr.run_grr(raw_data_file)
        # display
        w.TextGRR.insert(tk.END, '\r\nrun left grr:\r\n')
        w.TextGRR.insert(tk.END, '\r\n'.join(grr_display))

def run_grr_template(p1):
    print('dataProcessHelper_support.run_grr_template')
    print('p1 = {0}'.format(p1))
    subprocess.call('explorer ".\\"', shell=True)


def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top


def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None


if __name__ == '__main__':
    import dataProcessHelper
    dataProcessHelper.vp_start_gui()




